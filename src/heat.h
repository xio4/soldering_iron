#ifndef HEAT_H
#define HEAT_H

#include "pid.h"

//Суть метода состоит в следующем:
//
//1. Выставляем все коэффициенты (Kp, Ki, Kd) в 0.
//2. Начинаем постепенно увеличивать значение Kp и следим за реакцией системы. Нам нужно добиться, чтобы в системе начались устойчивые колебания (вызванные перерегулированием). Увеличиваем Kp, пока колебания системы не стабилизируются (перестанут затухать).
//3. Запоминаем текущее значение Kp (обозначим его Ku) и замеряем период колебаний системы (Tu).
//
//Все. Теперь используем полученные значения Ku и Tu для расчета всех параметров ПИД регулятора по формулам:
//
//Kp = 0.6 * Ku
//Ki = 2 * Kp / Tu
//Kd = Kp * Tu / 8
//
//Готово. Для дискретных регуляторов нужно еще учесть период дискретизации – T ( умножить на Ki та Т, разделить Kd на Т).

//#define CONS_KP 200.0 * SCALING_FACTOR
#define CONS_KP 10000.0 * SCALING_FACTOR
#define CONS_KI 0.0
//#define CONS_KD 0
#define CONS_KD 0.0
#define AGGRESSIVE_TEMP_DELTA 10
#define PWM_COEF 1

extern void heatInit(void);
extern void heatUpdate(uint16_t heatTemp, uint16_t adjustTemp);

#endif // HEAT_H
